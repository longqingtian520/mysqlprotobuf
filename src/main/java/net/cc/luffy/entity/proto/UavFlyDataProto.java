// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uav_flydata.proto

package net.cc.luffy.entity.proto;

public final class UavFlyDataProto {
	private UavFlyDataProto() {
	}

	public static void registerAllExtensions(com.github.os72.protobuf351.ExtensionRegistryLite registry) {
	}

	public static void registerAllExtensions(com.github.os72.protobuf351.ExtensionRegistry registry) {
		registerAllExtensions((com.github.os72.protobuf351.ExtensionRegistryLite) registry);
	}

	public interface UavFlyDataOrBuilder extends
			// @@protoc_insertion_point(interface_extends:net.cc.luffy.entity.proto.UavFlyData)
			com.github.os72.protobuf351.MessageOrBuilder {

		/**
		 * <pre>
		 * 飞机ID
		 * </pre>
		 *
		 * <code>string flyId = 1;</code>
		 */
		java.lang.String getFlyId();

		/**
		 * <pre>
		 * 飞机ID
		 * </pre>
		 *
		 * <code>string flyId = 1;</code>
		 */
		com.github.os72.protobuf351.ByteString getFlyIdBytes();

		/**
		 * <pre>
		 * 时间戳
		 * </pre>
		 *
		 * <code>fixed64 time = 2;</code>
		 */
		long getTime();

		/**
		 * <pre>
		 * 相对高度
		 * </pre>
		 *
		 * <code>double alt = 3;</code>
		 */
		double getAlt();

		/**
		 * <pre>
		 * 海拔高度
		 * </pre>
		 *
		 * <code>double height = 4;</code>
		 */
		double getHeight();

		/**
		 * <pre>
		 * 速度
		 * </pre>
		 *
		 * <code>float speed = 5;</code>
		 */
		float getSpeed();

		/**
		 * <pre>
		 * 航向
		 * </pre>
		 *
		 * <code>float direction = 6;</code>
		 */
		float getDirection();

		/**
		 * <pre>
		 * 飞机位置纬度
		 * </pre>
		 *
		 * <code>double lat = 7;</code>
		 */
		double getLat();

		/**
		 * <pre>
		 * 飞机位置经度
		 * </pre>
		 *
		 * <code>double lon = 8;</code>
		 */
		double getLon();

		/**
		 * <pre>
		 * 用户位置纬度
		 * </pre>
		 *
		 * <code>double hLat = 9;</code>
		 */
		double getHLat();

		/**
		 * <pre>
		 * 用户位置经度
		 * </pre>
		 *
		 * <code>double hLon = 10;</code>
		 */
		double getHLon();

		/**
		 * <pre>
		 * 水平旋转角
		 * </pre>
		 *
		 * <code>double yaw = 11;</code>
		 */
		double getYaw();

		/**
		 * <pre>
		 * 俯仰角
		 * </pre>
		 *
		 * <code>double pitch = 12;</code>
		 */
		double getPitch();

		/**
		 * <pre>
		 * 翻滚角
		 * </pre>
		 *
		 * <code>double roll = 13;</code>
		 */
		double getRoll();

		/**
		 * <pre>
		 * 厂商ID / U - CareAgentID
		 * </pre>
		 *
		 * <code>string mid = 14;</code>
		 */
		java.lang.String getMid();

		/**
		 * <pre>
		 * 厂商ID / U - CareAgentID
		 * </pre>
		 *
		 * <code>string mid = 14;</code>
		 */
		com.github.os72.protobuf351.ByteString getMidBytes();

		/**
		 * <pre>
		 * 飞机类型
		 * </pre>
		 *
		 * <code>string fType = 15;</code>
		 */
		java.lang.String getFType();

		/**
		 * <pre>
		 * 飞机类型
		 * </pre>
		 *
		 * <code>string fType = 15;</code>
		 */
		com.github.os72.protobuf351.ByteString getFTypeBytes();

		/**
		 * <pre>
		 * 数字签名
		 * </pre>
		 *
		 * <code>string sign = 16;</code>
		 */
		java.lang.String getSign();

		/**
		 * <pre>
		 * 数字签名
		 * </pre>
		 *
		 * <code>string sign = 16;</code>
		 */
		com.github.os72.protobuf351.ByteString getSignBytes();

		/**
		 * <pre>
		 * 预留字段1
		 * </pre>
		 *
		 * <code>string ext1 = 17;</code>
		 */
		java.lang.String getExt1();

		/**
		 * <pre>
		 * 预留字段1
		 * </pre>
		 *
		 * <code>string ext1 = 17;</code>
		 */
		com.github.os72.protobuf351.ByteString getExt1Bytes();

		/**
		 * <pre>
		 * 预留字段2
		 * </pre>
		 *
		 * <code>string ext2 = 18;</code>
		 */
		java.lang.String getExt2();

		/**
		 * <pre>
		 * 预留字段2
		 * </pre>
		 *
		 * <code>string ext2 = 18;</code>
		 */
		com.github.os72.protobuf351.ByteString getExt2Bytes();

		/**
		 * <pre>
		 * 飞参数据类型
		 * </pre>
		 *
		 * <code>int32 flyDataType = 19;</code>
		 */
		int getFlyDataType();

		/**
		 * <pre>
		 * 是否定位
		 * </pre>
		 *
		 * <code>bool isLocate = 20;</code>
		 */
		boolean getIsLocate();

		/**
		 * <pre>
		 * GPS卫星个数
		 * </pre>
		 *
		 * <code>int32 gpsCount = 21;</code>
		 */
		int getGpsCount();

		/**
		 * <pre>
		 * GSM信号强度（0-100）
		 * </pre>
		 *
		 * <code>int32 gsmStrength = 22;</code>
		 */
		int getGsmStrength();

		/**
		 * <pre>
		 * 设备电量（百分比）
		 * </pre>
		 *
		 * <code>string power = 23;</code>
		 */
		java.lang.String getPower();

		/**
		 * <pre>
		 * 设备电量（百分比）
		 * </pre>
		 *
		 * <code>string power = 23;</code>
		 */
		com.github.os72.protobuf351.ByteString getPowerBytes();

		/**
		 * <pre>
		 * 是否正在充电
		 * </pre>
		 *
		 * <code>bool charge = 24;</code>
		 */
		boolean getCharge();

		/**
		 * <pre>
		 * 无人机数据来源（优云，云世纪，北斗）
		 * </pre>
		 *
		 * <code>string dataSource = 25;</code>
		 */
		java.lang.String getDataSource();

		/**
		 * <pre>
		 * 无人机数据来源（优云，云世纪，北斗）
		 * </pre>
		 *
		 * <code>string dataSource = 25;</code>
		 */
		com.github.os72.protobuf351.ByteString getDataSourceBytes();

		/**
		 * <pre>
		 * 上云时间
		 * </pre>
		 *
		 * <code>fixed64 uploadTime = 26;</code>
		 */
		long getUploadTime();

		/**
		 * <pre>
		 * 原始纬度
		 * </pre>
		 *
		 * <code>double oLat = 27;</code>
		 */
		double getOLat();

		/**
		 * <pre>
		 * 原始经度
		 * </pre>
		 *
		 * <code>double oLon = 28;</code>
		 */
		double getOLon();

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */
		int getBagCount();

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */
		boolean containsBag(int key);

		/**
		 * Use {@link #getBagMap()} instead.
		 */
		@java.lang.Deprecated
		java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBag();

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */
		java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBagMap();

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrDefault(int key,
				net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag defaultValue);

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrThrow(int key);
	}

	/**
	 * <pre>
	 * 飞参数据
	 * </pre>
	 *
	 * Protobuf type {@code net.cc.luffy.entity.proto.UavFlyData}
	 */
	public static final class UavFlyData extends com.github.os72.protobuf351.GeneratedMessageV3 implements
			// @@protoc_insertion_point(message_implements:net.cc.luffy.entity.proto.UavFlyData)
			UavFlyDataOrBuilder {
		private static final long serialVersionUID = 0L;

		// Use UavFlyData.newBuilder() to construct.
		private UavFlyData(com.github.os72.protobuf351.GeneratedMessageV3.Builder<?> builder) {
			super(builder);
		}

		private UavFlyData() {
			flyId_ = "";
			time_ = 0L;
			alt_ = 0D;
			height_ = 0D;
			speed_ = 0F;
			direction_ = 0F;
			lat_ = 0D;
			lon_ = 0D;
			hLat_ = 0D;
			hLon_ = 0D;
			yaw_ = 0D;
			pitch_ = 0D;
			roll_ = 0D;
			mid_ = "";
			fType_ = "";
			sign_ = "";
			ext1_ = "";
			ext2_ = "";
			flyDataType_ = 0;
			isLocate_ = false;
			gpsCount_ = 0;
			gsmStrength_ = 0;
			power_ = "";
			charge_ = false;
			dataSource_ = "";
			uploadTime_ = 0L;
			oLat_ = 0D;
			oLon_ = 0D;
		}

		@java.lang.Override
		public final com.github.os72.protobuf351.UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}

		private UavFlyData(com.github.os72.protobuf351.CodedInputStream input,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			this();
			if (extensionRegistry == null) {
				throw new java.lang.NullPointerException();
			}
			int mutable_bitField0_ = 0;
			com.github.os72.protobuf351.UnknownFieldSet.Builder unknownFields = com.github.os72.protobuf351.UnknownFieldSet
					.newBuilder();
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
					case 0:
						done = true;
						break;
					case 10: {
						java.lang.String s = input.readStringRequireUtf8();

						flyId_ = s;
						break;
					}
					case 17: {

						time_ = input.readFixed64();
						break;
					}
					case 25: {

						alt_ = input.readDouble();
						break;
					}
					case 33: {

						height_ = input.readDouble();
						break;
					}
					case 45: {

						speed_ = input.readFloat();
						break;
					}
					case 53: {

						direction_ = input.readFloat();
						break;
					}
					case 57: {

						lat_ = input.readDouble();
						break;
					}
					case 65: {

						lon_ = input.readDouble();
						break;
					}
					case 73: {

						hLat_ = input.readDouble();
						break;
					}
					case 81: {

						hLon_ = input.readDouble();
						break;
					}
					case 89: {

						yaw_ = input.readDouble();
						break;
					}
					case 97: {

						pitch_ = input.readDouble();
						break;
					}
					case 105: {

						roll_ = input.readDouble();
						break;
					}
					case 114: {
						java.lang.String s = input.readStringRequireUtf8();

						mid_ = s;
						break;
					}
					case 122: {
						java.lang.String s = input.readStringRequireUtf8();

						fType_ = s;
						break;
					}
					case 130: {
						java.lang.String s = input.readStringRequireUtf8();

						sign_ = s;
						break;
					}
					case 138: {
						java.lang.String s = input.readStringRequireUtf8();

						ext1_ = s;
						break;
					}
					case 146: {
						java.lang.String s = input.readStringRequireUtf8();

						ext2_ = s;
						break;
					}
					case 152: {

						flyDataType_ = input.readInt32();
						break;
					}
					case 160: {

						isLocate_ = input.readBool();
						break;
					}
					case 168: {

						gpsCount_ = input.readInt32();
						break;
					}
					case 176: {

						gsmStrength_ = input.readInt32();
						break;
					}
					case 186: {
						java.lang.String s = input.readStringRequireUtf8();

						power_ = s;
						break;
					}
					case 192: {

						charge_ = input.readBool();
						break;
					}
					case 202: {
						java.lang.String s = input.readStringRequireUtf8();

						dataSource_ = s;
						break;
					}
					case 209: {

						uploadTime_ = input.readFixed64();
						break;
					}
					case 217: {

						oLat_ = input.readDouble();
						break;
					}
					case 225: {

						oLon_ = input.readDouble();
						break;
					}
					case 234: {
						if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
							bag_ = com.github.os72.protobuf351.MapField.newMapField(BagDefaultEntryHolder.defaultEntry);
							mutable_bitField0_ |= 0x10000000;
						}
						com.github.os72.protobuf351.MapEntry<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> bag__ = input
								.readMessage(BagDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
						bag_.getMutableMap().put(bag__.getKey(), bag__.getValue());
						break;
					}
					default: {
						if (!parseUnknownFieldProto3(input, unknownFields, extensionRegistry, tag)) {
							done = true;
						}
						break;
					}
					}
				}
			} catch (com.github.os72.protobuf351.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new com.github.os72.protobuf351.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
			} finally {
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}

		public static final com.github.os72.protobuf351.Descriptors.Descriptor getDescriptor() {
			return net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor;
		}

		@SuppressWarnings({ "rawtypes" })
		@java.lang.Override
		protected com.github.os72.protobuf351.MapField internalGetMapField(int number) {
			switch (number) {
			case 29:
				return internalGetBag();
			default:
				throw new RuntimeException("Invalid map field number: " + number);
			}
		}

		@java.lang.Override
		protected com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
			return net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_fieldAccessorTable
					.ensureFieldAccessorsInitialized(net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.class,
							net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.Builder.class);
		}

		@SuppressWarnings("unused")
		private int bitField0_;
		public static final int FLYID_FIELD_NUMBER = 1;
		private volatile java.lang.Object flyId_;

		/**
		 * <pre>
		 * 飞机ID
		 * </pre>
		 *
		 * <code>string flyId = 1;</code>
		 */
		public java.lang.String getFlyId() {
			java.lang.Object ref = flyId_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				flyId_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 飞机ID
		 * </pre>
		 *
		 * <code>string flyId = 1;</code>
		 */
		public com.github.os72.protobuf351.ByteString getFlyIdBytes() {
			java.lang.Object ref = flyId_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				flyId_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int TIME_FIELD_NUMBER = 2;
		private long time_;

		/**
		 * <pre>
		 * 时间戳
		 * </pre>
		 *
		 * <code>fixed64 time = 2;</code>
		 */
		public long getTime() {
			return time_;
		}

		public static final int ALT_FIELD_NUMBER = 3;
		private double alt_;

		/**
		 * <pre>
		 * 相对高度
		 * </pre>
		 *
		 * <code>double alt = 3;</code>
		 */
		public double getAlt() {
			return alt_;
		}

		public static final int HEIGHT_FIELD_NUMBER = 4;
		private double height_;

		/**
		 * <pre>
		 * 海拔高度
		 * </pre>
		 *
		 * <code>double height = 4;</code>
		 */
		public double getHeight() {
			return height_;
		}

		public static final int SPEED_FIELD_NUMBER = 5;
		private float speed_;

		/**
		 * <pre>
		 * 速度
		 * </pre>
		 *
		 * <code>float speed = 5;</code>
		 */
		public float getSpeed() {
			return speed_;
		}

		public static final int DIRECTION_FIELD_NUMBER = 6;
		private float direction_;

		/**
		 * <pre>
		 * 航向
		 * </pre>
		 *
		 * <code>float direction = 6;</code>
		 */
		public float getDirection() {
			return direction_;
		}

		public static final int LAT_FIELD_NUMBER = 7;
		private double lat_;

		/**
		 * <pre>
		 * 飞机位置纬度
		 * </pre>
		 *
		 * <code>double lat = 7;</code>
		 */
		public double getLat() {
			return lat_;
		}

		public static final int LON_FIELD_NUMBER = 8;
		private double lon_;

		/**
		 * <pre>
		 * 飞机位置经度
		 * </pre>
		 *
		 * <code>double lon = 8;</code>
		 */
		public double getLon() {
			return lon_;
		}

		public static final int HLAT_FIELD_NUMBER = 9;
		private double hLat_;

		/**
		 * <pre>
		 * 用户位置纬度
		 * </pre>
		 *
		 * <code>double hLat = 9;</code>
		 */
		public double getHLat() {
			return hLat_;
		}

		public static final int HLON_FIELD_NUMBER = 10;
		private double hLon_;

		/**
		 * <pre>
		 * 用户位置经度
		 * </pre>
		 *
		 * <code>double hLon = 10;</code>
		 */
		public double getHLon() {
			return hLon_;
		}

		public static final int YAW_FIELD_NUMBER = 11;
		private double yaw_;

		/**
		 * <pre>
		 * 水平旋转角
		 * </pre>
		 *
		 * <code>double yaw = 11;</code>
		 */
		public double getYaw() {
			return yaw_;
		}

		public static final int PITCH_FIELD_NUMBER = 12;
		private double pitch_;

		/**
		 * <pre>
		 * 俯仰角
		 * </pre>
		 *
		 * <code>double pitch = 12;</code>
		 */
		public double getPitch() {
			return pitch_;
		}

		public static final int ROLL_FIELD_NUMBER = 13;
		private double roll_;

		/**
		 * <pre>
		 * 翻滚角
		 * </pre>
		 *
		 * <code>double roll = 13;</code>
		 */
		public double getRoll() {
			return roll_;
		}

		public static final int MID_FIELD_NUMBER = 14;
		private volatile java.lang.Object mid_;

		/**
		 * <pre>
		 * 厂商ID / U - CareAgentID
		 * </pre>
		 *
		 * <code>string mid = 14;</code>
		 */
		public java.lang.String getMid() {
			java.lang.Object ref = mid_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				mid_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 厂商ID / U - CareAgentID
		 * </pre>
		 *
		 * <code>string mid = 14;</code>
		 */
		public com.github.os72.protobuf351.ByteString getMidBytes() {
			java.lang.Object ref = mid_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				mid_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int FTYPE_FIELD_NUMBER = 15;
		private volatile java.lang.Object fType_;

		/**
		 * <pre>
		 * 飞机类型
		 * </pre>
		 *
		 * <code>string fType = 15;</code>
		 */
		public java.lang.String getFType() {
			java.lang.Object ref = fType_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				fType_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 飞机类型
		 * </pre>
		 *
		 * <code>string fType = 15;</code>
		 */
		public com.github.os72.protobuf351.ByteString getFTypeBytes() {
			java.lang.Object ref = fType_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				fType_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int SIGN_FIELD_NUMBER = 16;
		private volatile java.lang.Object sign_;

		/**
		 * <pre>
		 * 数字签名
		 * </pre>
		 *
		 * <code>string sign = 16;</code>
		 */
		public java.lang.String getSign() {
			java.lang.Object ref = sign_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				sign_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 数字签名
		 * </pre>
		 *
		 * <code>string sign = 16;</code>
		 */
		public com.github.os72.protobuf351.ByteString getSignBytes() {
			java.lang.Object ref = sign_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				sign_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int EXT1_FIELD_NUMBER = 17;
		private volatile java.lang.Object ext1_;

		/**
		 * <pre>
		 * 预留字段1
		 * </pre>
		 *
		 * <code>string ext1 = 17;</code>
		 */
		public java.lang.String getExt1() {
			java.lang.Object ref = ext1_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				ext1_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 预留字段1
		 * </pre>
		 *
		 * <code>string ext1 = 17;</code>
		 */
		public com.github.os72.protobuf351.ByteString getExt1Bytes() {
			java.lang.Object ref = ext1_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				ext1_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int EXT2_FIELD_NUMBER = 18;
		private volatile java.lang.Object ext2_;

		/**
		 * <pre>
		 * 预留字段2
		 * </pre>
		 *
		 * <code>string ext2 = 18;</code>
		 */
		public java.lang.String getExt2() {
			java.lang.Object ref = ext2_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				ext2_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 预留字段2
		 * </pre>
		 *
		 * <code>string ext2 = 18;</code>
		 */
		public com.github.os72.protobuf351.ByteString getExt2Bytes() {
			java.lang.Object ref = ext2_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				ext2_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int FLYDATATYPE_FIELD_NUMBER = 19;
		private int flyDataType_;

		/**
		 * <pre>
		 * 飞参数据类型
		 * </pre>
		 *
		 * <code>int32 flyDataType = 19;</code>
		 */
		public int getFlyDataType() {
			return flyDataType_;
		}

		public static final int ISLOCATE_FIELD_NUMBER = 20;
		private boolean isLocate_;

		/**
		 * <pre>
		 * 是否定位
		 * </pre>
		 *
		 * <code>bool isLocate = 20;</code>
		 */
		public boolean getIsLocate() {
			return isLocate_;
		}

		public static final int GPSCOUNT_FIELD_NUMBER = 21;
		private int gpsCount_;

		/**
		 * <pre>
		 * GPS卫星个数
		 * </pre>
		 *
		 * <code>int32 gpsCount = 21;</code>
		 */
		public int getGpsCount() {
			return gpsCount_;
		}

		public static final int GSMSTRENGTH_FIELD_NUMBER = 22;
		private int gsmStrength_;

		/**
		 * <pre>
		 * GSM信号强度（0-100）
		 * </pre>
		 *
		 * <code>int32 gsmStrength = 22;</code>
		 */
		public int getGsmStrength() {
			return gsmStrength_;
		}

		public static final int POWER_FIELD_NUMBER = 23;
		private volatile java.lang.Object power_;

		/**
		 * <pre>
		 * 设备电量（百分比）
		 * </pre>
		 *
		 * <code>string power = 23;</code>
		 */
		public java.lang.String getPower() {
			java.lang.Object ref = power_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				power_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 设备电量（百分比）
		 * </pre>
		 *
		 * <code>string power = 23;</code>
		 */
		public com.github.os72.protobuf351.ByteString getPowerBytes() {
			java.lang.Object ref = power_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				power_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int CHARGE_FIELD_NUMBER = 24;
		private boolean charge_;

		/**
		 * <pre>
		 * 是否正在充电
		 * </pre>
		 *
		 * <code>bool charge = 24;</code>
		 */
		public boolean getCharge() {
			return charge_;
		}

		public static final int DATASOURCE_FIELD_NUMBER = 25;
		private volatile java.lang.Object dataSource_;

		/**
		 * <pre>
		 * 无人机数据来源（优云，云世纪，北斗）
		 * </pre>
		 *
		 * <code>string dataSource = 25;</code>
		 */
		public java.lang.String getDataSource() {
			java.lang.Object ref = dataSource_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				dataSource_ = s;
				return s;
			}
		}

		/**
		 * <pre>
		 * 无人机数据来源（优云，云世纪，北斗）
		 * </pre>
		 *
		 * <code>string dataSource = 25;</code>
		 */
		public com.github.os72.protobuf351.ByteString getDataSourceBytes() {
			java.lang.Object ref = dataSource_;
			if (ref instanceof java.lang.String) {
				com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
						.copyFromUtf8((java.lang.String) ref);
				dataSource_ = b;
				return b;
			} else {
				return (com.github.os72.protobuf351.ByteString) ref;
			}
		}

		public static final int UPLOADTIME_FIELD_NUMBER = 26;
		private long uploadTime_;

		/**
		 * <pre>
		 * 上云时间
		 * </pre>
		 *
		 * <code>fixed64 uploadTime = 26;</code>
		 */
		public long getUploadTime() {
			return uploadTime_;
		}

		public static final int OLAT_FIELD_NUMBER = 27;
		private double oLat_;

		/**
		 * <pre>
		 * 原始纬度
		 * </pre>
		 *
		 * <code>double oLat = 27;</code>
		 */
		public double getOLat() {
			return oLat_;
		}

		public static final int OLON_FIELD_NUMBER = 28;
		private double oLon_;

		/**
		 * <pre>
		 * 原始经度
		 * </pre>
		 *
		 * <code>double oLon = 28;</code>
		 */
		public double getOLon() {
			return oLon_;
		}

		public static final int BAG_FIELD_NUMBER = 29;

		private static final class BagDefaultEntryHolder {
			static final com.github.os72.protobuf351.MapEntry<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> defaultEntry = com.github.os72.protobuf351.MapEntry.<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag>newDefaultInstance(
					net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_descriptor,
					com.github.os72.protobuf351.WireFormat.FieldType.INT32, 0,
					com.github.os72.protobuf351.WireFormat.FieldType.MESSAGE,
					net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag.getDefaultInstance());
		}

		private com.github.os72.protobuf351.MapField<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> bag_;

		private com.github.os72.protobuf351.MapField<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> internalGetBag() {
			if (bag_ == null) {
				return com.github.os72.protobuf351.MapField.emptyMapField(BagDefaultEntryHolder.defaultEntry);
			}
			return bag_;
		}

		public int getBagCount() {
			return internalGetBag().getMap().size();
		}

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		public boolean containsBag(int key) {

			return internalGetBag().getMap().containsKey(key);
		}

		/**
		 * Use {@link #getBagMap()} instead.
		 */
		@java.lang.Deprecated
		public java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBag() {
			return getBagMap();
		}

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		public java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBagMap() {
			return internalGetBag().getMap();
		}

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		public net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrDefault(int key,
				net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag defaultValue) {

			java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> map = internalGetBag()
					.getMap();
			return map.containsKey(key) ? map.get(key) : defaultValue;
		}

		/**
		 * <pre>
		 * 挂载数据，key为挂载类型，value为挂载数据
		 * </pre>
		 *
		 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
		 */

		public net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrThrow(int key) {

			java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> map = internalGetBag()
					.getMap();
			if (!map.containsKey(key)) {
				throw new java.lang.IllegalArgumentException();
			}
			return map.get(key);
		}

		private byte memoizedIsInitialized = -1;

		@java.lang.Override
		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if (isInitialized == 1)
				return true;
			if (isInitialized == 0)
				return false;

			memoizedIsInitialized = 1;
			return true;
		}

		@java.lang.Override
		public void writeTo(com.github.os72.protobuf351.CodedOutputStream output) throws java.io.IOException {
			if (!getFlyIdBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 1, flyId_);
			}
			if (time_ != 0L) {
				output.writeFixed64(2, time_);
			}
			if (alt_ != 0D) {
				output.writeDouble(3, alt_);
			}
			if (height_ != 0D) {
				output.writeDouble(4, height_);
			}
			if (speed_ != 0F) {
				output.writeFloat(5, speed_);
			}
			if (direction_ != 0F) {
				output.writeFloat(6, direction_);
			}
			if (lat_ != 0D) {
				output.writeDouble(7, lat_);
			}
			if (lon_ != 0D) {
				output.writeDouble(8, lon_);
			}
			if (hLat_ != 0D) {
				output.writeDouble(9, hLat_);
			}
			if (hLon_ != 0D) {
				output.writeDouble(10, hLon_);
			}
			if (yaw_ != 0D) {
				output.writeDouble(11, yaw_);
			}
			if (pitch_ != 0D) {
				output.writeDouble(12, pitch_);
			}
			if (roll_ != 0D) {
				output.writeDouble(13, roll_);
			}
			if (!getMidBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 14, mid_);
			}
			if (!getFTypeBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 15, fType_);
			}
			if (!getSignBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 16, sign_);
			}
			if (!getExt1Bytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 17, ext1_);
			}
			if (!getExt2Bytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 18, ext2_);
			}
			if (flyDataType_ != 0) {
				output.writeInt32(19, flyDataType_);
			}
			if (isLocate_ != false) {
				output.writeBool(20, isLocate_);
			}
			if (gpsCount_ != 0) {
				output.writeInt32(21, gpsCount_);
			}
			if (gsmStrength_ != 0) {
				output.writeInt32(22, gsmStrength_);
			}
			if (!getPowerBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 23, power_);
			}
			if (charge_ != false) {
				output.writeBool(24, charge_);
			}
			if (!getDataSourceBytes().isEmpty()) {
				com.github.os72.protobuf351.GeneratedMessageV3.writeString(output, 25, dataSource_);
			}
			if (uploadTime_ != 0L) {
				output.writeFixed64(26, uploadTime_);
			}
			if (oLat_ != 0D) {
				output.writeDouble(27, oLat_);
			}
			if (oLon_ != 0D) {
				output.writeDouble(28, oLon_);
			}
			com.github.os72.protobuf351.GeneratedMessageV3.serializeIntegerMapTo(output, internalGetBag(),
					BagDefaultEntryHolder.defaultEntry, 29);
			unknownFields.writeTo(output);
		}

		@java.lang.Override
		public int getSerializedSize() {
			int size = memoizedSize;
			if (size != -1)
				return size;

			size = 0;
			if (!getFlyIdBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(1, flyId_);
			}
			if (time_ != 0L) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeFixed64Size(2, time_);
			}
			if (alt_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(3, alt_);
			}
			if (height_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(4, height_);
			}
			if (speed_ != 0F) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeFloatSize(5, speed_);
			}
			if (direction_ != 0F) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeFloatSize(6, direction_);
			}
			if (lat_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(7, lat_);
			}
			if (lon_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(8, lon_);
			}
			if (hLat_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(9, hLat_);
			}
			if (hLon_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(10, hLon_);
			}
			if (yaw_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(11, yaw_);
			}
			if (pitch_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(12, pitch_);
			}
			if (roll_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(13, roll_);
			}
			if (!getMidBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(14, mid_);
			}
			if (!getFTypeBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(15, fType_);
			}
			if (!getSignBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(16, sign_);
			}
			if (!getExt1Bytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(17, ext1_);
			}
			if (!getExt2Bytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(18, ext2_);
			}
			if (flyDataType_ != 0) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeInt32Size(19, flyDataType_);
			}
			if (isLocate_ != false) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeBoolSize(20, isLocate_);
			}
			if (gpsCount_ != 0) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeInt32Size(21, gpsCount_);
			}
			if (gsmStrength_ != 0) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeInt32Size(22, gsmStrength_);
			}
			if (!getPowerBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(23, power_);
			}
			if (charge_ != false) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeBoolSize(24, charge_);
			}
			if (!getDataSourceBytes().isEmpty()) {
				size += com.github.os72.protobuf351.GeneratedMessageV3.computeStringSize(25, dataSource_);
			}
			if (uploadTime_ != 0L) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeFixed64Size(26, uploadTime_);
			}
			if (oLat_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(27, oLat_);
			}
			if (oLon_ != 0D) {
				size += com.github.os72.protobuf351.CodedOutputStream.computeDoubleSize(28, oLon_);
			}
			for (java.util.Map.Entry<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> entry : internalGetBag()
					.getMap().entrySet()) {
				com.github.os72.protobuf351.MapEntry<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> bag__ = BagDefaultEntryHolder.defaultEntry
						.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build();
				size += com.github.os72.protobuf351.CodedOutputStream.computeMessageSize(29, bag__);
			}
			size += unknownFields.getSerializedSize();
			memoizedSize = size;
			return size;
		}

		@java.lang.Override
		public boolean equals(final java.lang.Object obj) {
			if (obj == this) {
				return true;
			}
			if (!(obj instanceof net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData)) {
				return super.equals(obj);
			}
			net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData other = (net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData) obj;

			boolean result = true;
			result = result && getFlyId().equals(other.getFlyId());
			result = result && (getTime() == other.getTime());
			result = result && (java.lang.Double.doubleToLongBits(getAlt()) == java.lang.Double
					.doubleToLongBits(other.getAlt()));
			result = result && (java.lang.Double.doubleToLongBits(getHeight()) == java.lang.Double
					.doubleToLongBits(other.getHeight()));
			result = result
					&& (java.lang.Float.floatToIntBits(getSpeed()) == java.lang.Float.floatToIntBits(other.getSpeed()));
			result = result && (java.lang.Float.floatToIntBits(getDirection()) == java.lang.Float
					.floatToIntBits(other.getDirection()));
			result = result && (java.lang.Double.doubleToLongBits(getLat()) == java.lang.Double
					.doubleToLongBits(other.getLat()));
			result = result && (java.lang.Double.doubleToLongBits(getLon()) == java.lang.Double
					.doubleToLongBits(other.getLon()));
			result = result && (java.lang.Double.doubleToLongBits(getHLat()) == java.lang.Double
					.doubleToLongBits(other.getHLat()));
			result = result && (java.lang.Double.doubleToLongBits(getHLon()) == java.lang.Double
					.doubleToLongBits(other.getHLon()));
			result = result && (java.lang.Double.doubleToLongBits(getYaw()) == java.lang.Double
					.doubleToLongBits(other.getYaw()));
			result = result && (java.lang.Double.doubleToLongBits(getPitch()) == java.lang.Double
					.doubleToLongBits(other.getPitch()));
			result = result && (java.lang.Double.doubleToLongBits(getRoll()) == java.lang.Double
					.doubleToLongBits(other.getRoll()));
			result = result && getMid().equals(other.getMid());
			result = result && getFType().equals(other.getFType());
			result = result && getSign().equals(other.getSign());
			result = result && getExt1().equals(other.getExt1());
			result = result && getExt2().equals(other.getExt2());
			result = result && (getFlyDataType() == other.getFlyDataType());
			result = result && (getIsLocate() == other.getIsLocate());
			result = result && (getGpsCount() == other.getGpsCount());
			result = result && (getGsmStrength() == other.getGsmStrength());
			result = result && getPower().equals(other.getPower());
			result = result && (getCharge() == other.getCharge());
			result = result && getDataSource().equals(other.getDataSource());
			result = result && (getUploadTime() == other.getUploadTime());
			result = result && (java.lang.Double.doubleToLongBits(getOLat()) == java.lang.Double
					.doubleToLongBits(other.getOLat()));
			result = result && (java.lang.Double.doubleToLongBits(getOLon()) == java.lang.Double
					.doubleToLongBits(other.getOLon()));
			result = result && internalGetBag().equals(other.internalGetBag());
			result = result && unknownFields.equals(other.unknownFields);
			return result;
		}

		@SuppressWarnings("unchecked")
		@java.lang.Override
		public int hashCode() {
			if (memoizedHashCode != 0) {
				return memoizedHashCode;
			}
			int hash = 41;
			hash = (19 * hash) + getDescriptor().hashCode();
			hash = (37 * hash) + FLYID_FIELD_NUMBER;
			hash = (53 * hash) + getFlyId().hashCode();
			hash = (37 * hash) + TIME_FIELD_NUMBER;
			hash = (53 * hash) + com.github.os72.protobuf351.Internal.hashLong(getTime());
			hash = (37 * hash) + ALT_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getAlt()));
			hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getHeight()));
			hash = (37 * hash) + SPEED_FIELD_NUMBER;
			hash = (53 * hash) + java.lang.Float.floatToIntBits(getSpeed());
			hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
			hash = (53 * hash) + java.lang.Float.floatToIntBits(getDirection());
			hash = (37 * hash) + LAT_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getLat()));
			hash = (37 * hash) + LON_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getLon()));
			hash = (37 * hash) + HLAT_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getHLat()));
			hash = (37 * hash) + HLON_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getHLon()));
			hash = (37 * hash) + YAW_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getYaw()));
			hash = (37 * hash) + PITCH_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getPitch()));
			hash = (37 * hash) + ROLL_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getRoll()));
			hash = (37 * hash) + MID_FIELD_NUMBER;
			hash = (53 * hash) + getMid().hashCode();
			hash = (37 * hash) + FTYPE_FIELD_NUMBER;
			hash = (53 * hash) + getFType().hashCode();
			hash = (37 * hash) + SIGN_FIELD_NUMBER;
			hash = (53 * hash) + getSign().hashCode();
			hash = (37 * hash) + EXT1_FIELD_NUMBER;
			hash = (53 * hash) + getExt1().hashCode();
			hash = (37 * hash) + EXT2_FIELD_NUMBER;
			hash = (53 * hash) + getExt2().hashCode();
			hash = (37 * hash) + FLYDATATYPE_FIELD_NUMBER;
			hash = (53 * hash) + getFlyDataType();
			hash = (37 * hash) + ISLOCATE_FIELD_NUMBER;
			hash = (53 * hash) + com.github.os72.protobuf351.Internal.hashBoolean(getIsLocate());
			hash = (37 * hash) + GPSCOUNT_FIELD_NUMBER;
			hash = (53 * hash) + getGpsCount();
			hash = (37 * hash) + GSMSTRENGTH_FIELD_NUMBER;
			hash = (53 * hash) + getGsmStrength();
			hash = (37 * hash) + POWER_FIELD_NUMBER;
			hash = (53 * hash) + getPower().hashCode();
			hash = (37 * hash) + CHARGE_FIELD_NUMBER;
			hash = (53 * hash) + com.github.os72.protobuf351.Internal.hashBoolean(getCharge());
			hash = (37 * hash) + DATASOURCE_FIELD_NUMBER;
			hash = (53 * hash) + getDataSource().hashCode();
			hash = (37 * hash) + UPLOADTIME_FIELD_NUMBER;
			hash = (53 * hash) + com.github.os72.protobuf351.Internal.hashLong(getUploadTime());
			hash = (37 * hash) + OLAT_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getOLat()));
			hash = (37 * hash) + OLON_FIELD_NUMBER;
			hash = (53 * hash)
					+ com.github.os72.protobuf351.Internal.hashLong(java.lang.Double.doubleToLongBits(getOLon()));
			if (!internalGetBag().getMap().isEmpty()) {
				hash = (37 * hash) + BAG_FIELD_NUMBER;
				hash = (53 * hash) + internalGetBag().hashCode();
			}
			hash = (29 * hash) + unknownFields.hashCode();
			memoizedHashCode = hash;
			return hash;
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(java.nio.ByteBuffer data)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(java.nio.ByteBuffer data,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(
				com.github.os72.protobuf351.ByteString data)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(
				com.github.os72.protobuf351.ByteString data,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(byte[] data)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(byte[] data,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry)
				throws com.github.os72.protobuf351.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(java.io.InputStream input)
				throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(java.io.InputStream input,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseWithIOException(PARSER, input,
					extensionRegistry);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseDelimitedFrom(java.io.InputStream input)
				throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseDelimitedFrom(java.io.InputStream input,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
					extensionRegistry);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(
				com.github.os72.protobuf351.CodedInputStream input) throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parseFrom(
				com.github.os72.protobuf351.CodedInputStream input,
				com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return com.github.os72.protobuf351.GeneratedMessageV3.parseWithIOException(PARSER, input,
					extensionRegistry);
		}

		@java.lang.Override
		public Builder newBuilderForType() {
			return newBuilder();
		}

		public static Builder newBuilder() {
			return DEFAULT_INSTANCE.toBuilder();
		}

		public static Builder newBuilder(net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData prototype) {
			return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
		}

		@java.lang.Override
		public Builder toBuilder() {
			return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
		}

		@java.lang.Override
		protected Builder newBuilderForType(com.github.os72.protobuf351.GeneratedMessageV3.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}

		/**
		 * <pre>
		 * 飞参数据
		 * </pre>
		 *
		 * Protobuf type {@code net.cc.luffy.entity.proto.UavFlyData}
		 */
		public static final class Builder extends com.github.os72.protobuf351.GeneratedMessageV3.Builder<Builder>
				implements
				// @@protoc_insertion_point(builder_implements:net.cc.luffy.entity.proto.UavFlyData)
				net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyDataOrBuilder {
			public static final com.github.os72.protobuf351.Descriptors.Descriptor getDescriptor() {
				return net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor;
			}

			@SuppressWarnings({ "rawtypes" })
			protected com.github.os72.protobuf351.MapField internalGetMapField(int number) {
				switch (number) {
				case 29:
					return internalGetBag();
				default:
					throw new RuntimeException("Invalid map field number: " + number);
				}
			}

			@SuppressWarnings({ "rawtypes" })
			protected com.github.os72.protobuf351.MapField internalGetMutableMapField(int number) {
				switch (number) {
				case 29:
					return internalGetMutableBag();
				default:
					throw new RuntimeException("Invalid map field number: " + number);
				}
			}

			@java.lang.Override
			protected com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
				return net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_fieldAccessorTable
						.ensureFieldAccessorsInitialized(net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.class,
								net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.Builder.class);
			}

			// Construct using
			// net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}

			private Builder(com.github.os72.protobuf351.GeneratedMessageV3.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}

			private void maybeForceBuilderInitialization() {
				if (com.github.os72.protobuf351.GeneratedMessageV3.alwaysUseFieldBuilders) {
				}
			}

			@java.lang.Override
			public Builder clear() {
				super.clear();
				flyId_ = "";

				time_ = 0L;

				alt_ = 0D;

				height_ = 0D;

				speed_ = 0F;

				direction_ = 0F;

				lat_ = 0D;

				lon_ = 0D;

				hLat_ = 0D;

				hLon_ = 0D;

				yaw_ = 0D;

				pitch_ = 0D;

				roll_ = 0D;

				mid_ = "";

				fType_ = "";

				sign_ = "";

				ext1_ = "";

				ext2_ = "";

				flyDataType_ = 0;

				isLocate_ = false;

				gpsCount_ = 0;

				gsmStrength_ = 0;

				power_ = "";

				charge_ = false;

				dataSource_ = "";

				uploadTime_ = 0L;

				oLat_ = 0D;

				oLon_ = 0D;

				internalGetMutableBag().clear();
				return this;
			}

			@java.lang.Override
			public com.github.os72.protobuf351.Descriptors.Descriptor getDescriptorForType() {
				return net.cc.luffy.entity.proto.UavFlyDataProto.internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor;
			}

			@java.lang.Override
			public net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData getDefaultInstanceForType() {
				return net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.getDefaultInstance();
			}

			@java.lang.Override
			public net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData build() {
				net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData result = buildPartial();
				if (!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}

			@SuppressWarnings("unused")
			@java.lang.Override
			public net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData buildPartial() {
				net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData result = new net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData(
						this);
				int from_bitField0_ = bitField0_;
				int to_bitField0_ = 0;
				result.flyId_ = flyId_;
				result.time_ = time_;
				result.alt_ = alt_;
				result.height_ = height_;
				result.speed_ = speed_;
				result.direction_ = direction_;
				result.lat_ = lat_;
				result.lon_ = lon_;
				result.hLat_ = hLat_;
				result.hLon_ = hLon_;
				result.yaw_ = yaw_;
				result.pitch_ = pitch_;
				result.roll_ = roll_;
				result.mid_ = mid_;
				result.fType_ = fType_;
				result.sign_ = sign_;
				result.ext1_ = ext1_;
				result.ext2_ = ext2_;
				result.flyDataType_ = flyDataType_;
				result.isLocate_ = isLocate_;
				result.gpsCount_ = gpsCount_;
				result.gsmStrength_ = gsmStrength_;
				result.power_ = power_;
				result.charge_ = charge_;
				result.dataSource_ = dataSource_;
				result.uploadTime_ = uploadTime_;
				result.oLat_ = oLat_;
				result.oLon_ = oLon_;
				result.bag_ = internalGetBag();
				result.bag_.makeImmutable();
				result.bitField0_ = to_bitField0_;
				onBuilt();
				return result;
			}

			@java.lang.Override
			public Builder clone() {
				return (Builder) super.clone();
			}

			@java.lang.Override
			public Builder setField(com.github.os72.protobuf351.Descriptors.FieldDescriptor field,
					java.lang.Object value) {
				return (Builder) super.setField(field, value);
			}

			@java.lang.Override
			public Builder clearField(com.github.os72.protobuf351.Descriptors.FieldDescriptor field) {
				return (Builder) super.clearField(field);
			}

			@java.lang.Override
			public Builder clearOneof(com.github.os72.protobuf351.Descriptors.OneofDescriptor oneof) {
				return (Builder) super.clearOneof(oneof);
			}

			@java.lang.Override
			public Builder setRepeatedField(com.github.os72.protobuf351.Descriptors.FieldDescriptor field, int index,
					java.lang.Object value) {
				return (Builder) super.setRepeatedField(field, index, value);
			}

			@java.lang.Override
			public Builder addRepeatedField(com.github.os72.protobuf351.Descriptors.FieldDescriptor field,
					java.lang.Object value) {
				return (Builder) super.addRepeatedField(field, value);
			}

			@java.lang.Override
			public Builder mergeFrom(com.github.os72.protobuf351.Message other) {
				if (other instanceof net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData) {
					return mergeFrom((net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}

			public Builder mergeFrom(net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData other) {
				if (other == net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData.getDefaultInstance())
					return this;
				if (!other.getFlyId().isEmpty()) {
					flyId_ = other.flyId_;
					onChanged();
				}
				if (other.getTime() != 0L) {
					setTime(other.getTime());
				}
				if (other.getAlt() != 0D) {
					setAlt(other.getAlt());
				}
				if (other.getHeight() != 0D) {
					setHeight(other.getHeight());
				}
				if (other.getSpeed() != 0F) {
					setSpeed(other.getSpeed());
				}
				if (other.getDirection() != 0F) {
					setDirection(other.getDirection());
				}
				if (other.getLat() != 0D) {
					setLat(other.getLat());
				}
				if (other.getLon() != 0D) {
					setLon(other.getLon());
				}
				if (other.getHLat() != 0D) {
					setHLat(other.getHLat());
				}
				if (other.getHLon() != 0D) {
					setHLon(other.getHLon());
				}
				if (other.getYaw() != 0D) {
					setYaw(other.getYaw());
				}
				if (other.getPitch() != 0D) {
					setPitch(other.getPitch());
				}
				if (other.getRoll() != 0D) {
					setRoll(other.getRoll());
				}
				if (!other.getMid().isEmpty()) {
					mid_ = other.mid_;
					onChanged();
				}
				if (!other.getFType().isEmpty()) {
					fType_ = other.fType_;
					onChanged();
				}
				if (!other.getSign().isEmpty()) {
					sign_ = other.sign_;
					onChanged();
				}
				if (!other.getExt1().isEmpty()) {
					ext1_ = other.ext1_;
					onChanged();
				}
				if (!other.getExt2().isEmpty()) {
					ext2_ = other.ext2_;
					onChanged();
				}
				if (other.getFlyDataType() != 0) {
					setFlyDataType(other.getFlyDataType());
				}
				if (other.getIsLocate() != false) {
					setIsLocate(other.getIsLocate());
				}
				if (other.getGpsCount() != 0) {
					setGpsCount(other.getGpsCount());
				}
				if (other.getGsmStrength() != 0) {
					setGsmStrength(other.getGsmStrength());
				}
				if (!other.getPower().isEmpty()) {
					power_ = other.power_;
					onChanged();
				}
				if (other.getCharge() != false) {
					setCharge(other.getCharge());
				}
				if (!other.getDataSource().isEmpty()) {
					dataSource_ = other.dataSource_;
					onChanged();
				}
				if (other.getUploadTime() != 0L) {
					setUploadTime(other.getUploadTime());
				}
				if (other.getOLat() != 0D) {
					setOLat(other.getOLat());
				}
				if (other.getOLon() != 0D) {
					setOLon(other.getOLon());
				}
				internalGetMutableBag().mergeFrom(other.internalGetBag());
				this.mergeUnknownFields(other.unknownFields);
				onChanged();
				return this;
			}

			@java.lang.Override
			public final boolean isInitialized() {
				return true;
			}

			@java.lang.Override
			public Builder mergeFrom(com.github.os72.protobuf351.CodedInputStream input,
					com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
				} catch (com.github.os72.protobuf351.InvalidProtocolBufferException e) {
					parsedMessage = (net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData) e.getUnfinishedMessage();
					throw e.unwrapIOException();
				} finally {
					if (parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}

			private int bitField0_;

			private java.lang.Object flyId_ = "";

			/**
			 * <pre>
			 * 飞机ID
			 * </pre>
			 *
			 * <code>string flyId = 1;</code>
			 */
			public java.lang.String getFlyId() {
				java.lang.Object ref = flyId_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					flyId_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 飞机ID
			 * </pre>
			 *
			 * <code>string flyId = 1;</code>
			 */
			public com.github.os72.protobuf351.ByteString getFlyIdBytes() {
				java.lang.Object ref = flyId_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					flyId_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 飞机ID
			 * </pre>
			 *
			 * <code>string flyId = 1;</code>
			 */
			public Builder setFlyId(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				flyId_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机ID
			 * </pre>
			 *
			 * <code>string flyId = 1;</code>
			 */
			public Builder clearFlyId() {

				flyId_ = getDefaultInstance().getFlyId();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机ID
			 * </pre>
			 *
			 * <code>string flyId = 1;</code>
			 */
			public Builder setFlyIdBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				flyId_ = value;
				onChanged();
				return this;
			}

			private long time_;

			/**
			 * <pre>
			 * 时间戳
			 * </pre>
			 *
			 * <code>fixed64 time = 2;</code>
			 */
			public long getTime() {
				return time_;
			}

			/**
			 * <pre>
			 * 时间戳
			 * </pre>
			 *
			 * <code>fixed64 time = 2;</code>
			 */
			public Builder setTime(long value) {

				time_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 时间戳
			 * </pre>
			 *
			 * <code>fixed64 time = 2;</code>
			 */
			public Builder clearTime() {

				time_ = 0L;
				onChanged();
				return this;
			}

			private double alt_;

			/**
			 * <pre>
			 * 相对高度
			 * </pre>
			 *
			 * <code>double alt = 3;</code>
			 */
			public double getAlt() {
				return alt_;
			}

			/**
			 * <pre>
			 * 相对高度
			 * </pre>
			 *
			 * <code>double alt = 3;</code>
			 */
			public Builder setAlt(double value) {

				alt_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 相对高度
			 * </pre>
			 *
			 * <code>double alt = 3;</code>
			 */
			public Builder clearAlt() {

				alt_ = 0D;
				onChanged();
				return this;
			}

			private double height_;

			/**
			 * <pre>
			 * 海拔高度
			 * </pre>
			 *
			 * <code>double height = 4;</code>
			 */
			public double getHeight() {
				return height_;
			}

			/**
			 * <pre>
			 * 海拔高度
			 * </pre>
			 *
			 * <code>double height = 4;</code>
			 */
			public Builder setHeight(double value) {

				height_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 海拔高度
			 * </pre>
			 *
			 * <code>double height = 4;</code>
			 */
			public Builder clearHeight() {

				height_ = 0D;
				onChanged();
				return this;
			}

			private float speed_;

			/**
			 * <pre>
			 * 速度
			 * </pre>
			 *
			 * <code>float speed = 5;</code>
			 */
			public float getSpeed() {
				return speed_;
			}

			/**
			 * <pre>
			 * 速度
			 * </pre>
			 *
			 * <code>float speed = 5;</code>
			 */
			public Builder setSpeed(float value) {

				speed_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 速度
			 * </pre>
			 *
			 * <code>float speed = 5;</code>
			 */
			public Builder clearSpeed() {

				speed_ = 0F;
				onChanged();
				return this;
			}

			private float direction_;

			/**
			 * <pre>
			 * 航向
			 * </pre>
			 *
			 * <code>float direction = 6;</code>
			 */
			public float getDirection() {
				return direction_;
			}

			/**
			 * <pre>
			 * 航向
			 * </pre>
			 *
			 * <code>float direction = 6;</code>
			 */
			public Builder setDirection(float value) {

				direction_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 航向
			 * </pre>
			 *
			 * <code>float direction = 6;</code>
			 */
			public Builder clearDirection() {

				direction_ = 0F;
				onChanged();
				return this;
			}

			private double lat_;

			/**
			 * <pre>
			 * 飞机位置纬度
			 * </pre>
			 *
			 * <code>double lat = 7;</code>
			 */
			public double getLat() {
				return lat_;
			}

			/**
			 * <pre>
			 * 飞机位置纬度
			 * </pre>
			 *
			 * <code>double lat = 7;</code>
			 */
			public Builder setLat(double value) {

				lat_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机位置纬度
			 * </pre>
			 *
			 * <code>double lat = 7;</code>
			 */
			public Builder clearLat() {

				lat_ = 0D;
				onChanged();
				return this;
			}

			private double lon_;

			/**
			 * <pre>
			 * 飞机位置经度
			 * </pre>
			 *
			 * <code>double lon = 8;</code>
			 */
			public double getLon() {
				return lon_;
			}

			/**
			 * <pre>
			 * 飞机位置经度
			 * </pre>
			 *
			 * <code>double lon = 8;</code>
			 */
			public Builder setLon(double value) {

				lon_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机位置经度
			 * </pre>
			 *
			 * <code>double lon = 8;</code>
			 */
			public Builder clearLon() {

				lon_ = 0D;
				onChanged();
				return this;
			}

			private double hLat_;

			/**
			 * <pre>
			 * 用户位置纬度
			 * </pre>
			 *
			 * <code>double hLat = 9;</code>
			 */
			public double getHLat() {
				return hLat_;
			}

			/**
			 * <pre>
			 * 用户位置纬度
			 * </pre>
			 *
			 * <code>double hLat = 9;</code>
			 */
			public Builder setHLat(double value) {

				hLat_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 用户位置纬度
			 * </pre>
			 *
			 * <code>double hLat = 9;</code>
			 */
			public Builder clearHLat() {

				hLat_ = 0D;
				onChanged();
				return this;
			}

			private double hLon_;

			/**
			 * <pre>
			 * 用户位置经度
			 * </pre>
			 *
			 * <code>double hLon = 10;</code>
			 */
			public double getHLon() {
				return hLon_;
			}

			/**
			 * <pre>
			 * 用户位置经度
			 * </pre>
			 *
			 * <code>double hLon = 10;</code>
			 */
			public Builder setHLon(double value) {

				hLon_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 用户位置经度
			 * </pre>
			 *
			 * <code>double hLon = 10;</code>
			 */
			public Builder clearHLon() {

				hLon_ = 0D;
				onChanged();
				return this;
			}

			private double yaw_;

			/**
			 * <pre>
			 * 水平旋转角
			 * </pre>
			 *
			 * <code>double yaw = 11;</code>
			 */
			public double getYaw() {
				return yaw_;
			}

			/**
			 * <pre>
			 * 水平旋转角
			 * </pre>
			 *
			 * <code>double yaw = 11;</code>
			 */
			public Builder setYaw(double value) {

				yaw_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 水平旋转角
			 * </pre>
			 *
			 * <code>double yaw = 11;</code>
			 */
			public Builder clearYaw() {

				yaw_ = 0D;
				onChanged();
				return this;
			}

			private double pitch_;

			/**
			 * <pre>
			 * 俯仰角
			 * </pre>
			 *
			 * <code>double pitch = 12;</code>
			 */
			public double getPitch() {
				return pitch_;
			}

			/**
			 * <pre>
			 * 俯仰角
			 * </pre>
			 *
			 * <code>double pitch = 12;</code>
			 */
			public Builder setPitch(double value) {

				pitch_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 俯仰角
			 * </pre>
			 *
			 * <code>double pitch = 12;</code>
			 */
			public Builder clearPitch() {

				pitch_ = 0D;
				onChanged();
				return this;
			}

			private double roll_;

			/**
			 * <pre>
			 * 翻滚角
			 * </pre>
			 *
			 * <code>double roll = 13;</code>
			 */
			public double getRoll() {
				return roll_;
			}

			/**
			 * <pre>
			 * 翻滚角
			 * </pre>
			 *
			 * <code>double roll = 13;</code>
			 */
			public Builder setRoll(double value) {

				roll_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 翻滚角
			 * </pre>
			 *
			 * <code>double roll = 13;</code>
			 */
			public Builder clearRoll() {

				roll_ = 0D;
				onChanged();
				return this;
			}

			private java.lang.Object mid_ = "";

			/**
			 * <pre>
			 * 厂商ID / U - CareAgentID
			 * </pre>
			 *
			 * <code>string mid = 14;</code>
			 */
			public java.lang.String getMid() {
				java.lang.Object ref = mid_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					mid_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 厂商ID / U - CareAgentID
			 * </pre>
			 *
			 * <code>string mid = 14;</code>
			 */
			public com.github.os72.protobuf351.ByteString getMidBytes() {
				java.lang.Object ref = mid_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					mid_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 厂商ID / U - CareAgentID
			 * </pre>
			 *
			 * <code>string mid = 14;</code>
			 */
			public Builder setMid(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				mid_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 厂商ID / U - CareAgentID
			 * </pre>
			 *
			 * <code>string mid = 14;</code>
			 */
			public Builder clearMid() {

				mid_ = getDefaultInstance().getMid();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 厂商ID / U - CareAgentID
			 * </pre>
			 *
			 * <code>string mid = 14;</code>
			 */
			public Builder setMidBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				mid_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object fType_ = "";

			/**
			 * <pre>
			 * 飞机类型
			 * </pre>
			 *
			 * <code>string fType = 15;</code>
			 */
			public java.lang.String getFType() {
				java.lang.Object ref = fType_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					fType_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 飞机类型
			 * </pre>
			 *
			 * <code>string fType = 15;</code>
			 */
			public com.github.os72.protobuf351.ByteString getFTypeBytes() {
				java.lang.Object ref = fType_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					fType_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 飞机类型
			 * </pre>
			 *
			 * <code>string fType = 15;</code>
			 */
			public Builder setFType(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				fType_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机类型
			 * </pre>
			 *
			 * <code>string fType = 15;</code>
			 */
			public Builder clearFType() {

				fType_ = getDefaultInstance().getFType();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞机类型
			 * </pre>
			 *
			 * <code>string fType = 15;</code>
			 */
			public Builder setFTypeBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				fType_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object sign_ = "";

			/**
			 * <pre>
			 * 数字签名
			 * </pre>
			 *
			 * <code>string sign = 16;</code>
			 */
			public java.lang.String getSign() {
				java.lang.Object ref = sign_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					sign_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 数字签名
			 * </pre>
			 *
			 * <code>string sign = 16;</code>
			 */
			public com.github.os72.protobuf351.ByteString getSignBytes() {
				java.lang.Object ref = sign_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					sign_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 数字签名
			 * </pre>
			 *
			 * <code>string sign = 16;</code>
			 */
			public Builder setSign(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				sign_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 数字签名
			 * </pre>
			 *
			 * <code>string sign = 16;</code>
			 */
			public Builder clearSign() {

				sign_ = getDefaultInstance().getSign();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 数字签名
			 * </pre>
			 *
			 * <code>string sign = 16;</code>
			 */
			public Builder setSignBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				sign_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object ext1_ = "";

			/**
			 * <pre>
			 * 预留字段1
			 * </pre>
			 *
			 * <code>string ext1 = 17;</code>
			 */
			public java.lang.String getExt1() {
				java.lang.Object ref = ext1_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					ext1_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 预留字段1
			 * </pre>
			 *
			 * <code>string ext1 = 17;</code>
			 */
			public com.github.os72.protobuf351.ByteString getExt1Bytes() {
				java.lang.Object ref = ext1_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					ext1_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 预留字段1
			 * </pre>
			 *
			 * <code>string ext1 = 17;</code>
			 */
			public Builder setExt1(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				ext1_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 预留字段1
			 * </pre>
			 *
			 * <code>string ext1 = 17;</code>
			 */
			public Builder clearExt1() {

				ext1_ = getDefaultInstance().getExt1();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 预留字段1
			 * </pre>
			 *
			 * <code>string ext1 = 17;</code>
			 */
			public Builder setExt1Bytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				ext1_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object ext2_ = "";

			/**
			 * <pre>
			 * 预留字段2
			 * </pre>
			 *
			 * <code>string ext2 = 18;</code>
			 */
			public java.lang.String getExt2() {
				java.lang.Object ref = ext2_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					ext2_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 预留字段2
			 * </pre>
			 *
			 * <code>string ext2 = 18;</code>
			 */
			public com.github.os72.protobuf351.ByteString getExt2Bytes() {
				java.lang.Object ref = ext2_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					ext2_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 预留字段2
			 * </pre>
			 *
			 * <code>string ext2 = 18;</code>
			 */
			public Builder setExt2(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				ext2_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 预留字段2
			 * </pre>
			 *
			 * <code>string ext2 = 18;</code>
			 */
			public Builder clearExt2() {

				ext2_ = getDefaultInstance().getExt2();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 预留字段2
			 * </pre>
			 *
			 * <code>string ext2 = 18;</code>
			 */
			public Builder setExt2Bytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				ext2_ = value;
				onChanged();
				return this;
			}

			private int flyDataType_;

			/**
			 * <pre>
			 * 飞参数据类型
			 * </pre>
			 *
			 * <code>int32 flyDataType = 19;</code>
			 */
			public int getFlyDataType() {
				return flyDataType_;
			}

			/**
			 * <pre>
			 * 飞参数据类型
			 * </pre>
			 *
			 * <code>int32 flyDataType = 19;</code>
			 */
			public Builder setFlyDataType(int value) {

				flyDataType_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 飞参数据类型
			 * </pre>
			 *
			 * <code>int32 flyDataType = 19;</code>
			 */
			public Builder clearFlyDataType() {

				flyDataType_ = 0;
				onChanged();
				return this;
			}

			private boolean isLocate_;

			/**
			 * <pre>
			 * 是否定位
			 * </pre>
			 *
			 * <code>bool isLocate = 20;</code>
			 */
			public boolean getIsLocate() {
				return isLocate_;
			}

			/**
			 * <pre>
			 * 是否定位
			 * </pre>
			 *
			 * <code>bool isLocate = 20;</code>
			 */
			public Builder setIsLocate(boolean value) {

				isLocate_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 是否定位
			 * </pre>
			 *
			 * <code>bool isLocate = 20;</code>
			 */
			public Builder clearIsLocate() {

				isLocate_ = false;
				onChanged();
				return this;
			}

			private int gpsCount_;

			/**
			 * <pre>
			 * GPS卫星个数
			 * </pre>
			 *
			 * <code>int32 gpsCount = 21;</code>
			 */
			public int getGpsCount() {
				return gpsCount_;
			}

			/**
			 * <pre>
			 * GPS卫星个数
			 * </pre>
			 *
			 * <code>int32 gpsCount = 21;</code>
			 */
			public Builder setGpsCount(int value) {

				gpsCount_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * GPS卫星个数
			 * </pre>
			 *
			 * <code>int32 gpsCount = 21;</code>
			 */
			public Builder clearGpsCount() {

				gpsCount_ = 0;
				onChanged();
				return this;
			}

			private int gsmStrength_;

			/**
			 * <pre>
			 * GSM信号强度（0-100）
			 * </pre>
			 *
			 * <code>int32 gsmStrength = 22;</code>
			 */
			public int getGsmStrength() {
				return gsmStrength_;
			}

			/**
			 * <pre>
			 * GSM信号强度（0-100）
			 * </pre>
			 *
			 * <code>int32 gsmStrength = 22;</code>
			 */
			public Builder setGsmStrength(int value) {

				gsmStrength_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * GSM信号强度（0-100）
			 * </pre>
			 *
			 * <code>int32 gsmStrength = 22;</code>
			 */
			public Builder clearGsmStrength() {

				gsmStrength_ = 0;
				onChanged();
				return this;
			}

			private java.lang.Object power_ = "";

			/**
			 * <pre>
			 * 设备电量（百分比）
			 * </pre>
			 *
			 * <code>string power = 23;</code>
			 */
			public java.lang.String getPower() {
				java.lang.Object ref = power_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					power_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 设备电量（百分比）
			 * </pre>
			 *
			 * <code>string power = 23;</code>
			 */
			public com.github.os72.protobuf351.ByteString getPowerBytes() {
				java.lang.Object ref = power_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					power_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 设备电量（百分比）
			 * </pre>
			 *
			 * <code>string power = 23;</code>
			 */
			public Builder setPower(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				power_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 设备电量（百分比）
			 * </pre>
			 *
			 * <code>string power = 23;</code>
			 */
			public Builder clearPower() {

				power_ = getDefaultInstance().getPower();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 设备电量（百分比）
			 * </pre>
			 *
			 * <code>string power = 23;</code>
			 */
			public Builder setPowerBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				power_ = value;
				onChanged();
				return this;
			}

			private boolean charge_;

			/**
			 * <pre>
			 * 是否正在充电
			 * </pre>
			 *
			 * <code>bool charge = 24;</code>
			 */
			public boolean getCharge() {
				return charge_;
			}

			/**
			 * <pre>
			 * 是否正在充电
			 * </pre>
			 *
			 * <code>bool charge = 24;</code>
			 */
			public Builder setCharge(boolean value) {

				charge_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 是否正在充电
			 * </pre>
			 *
			 * <code>bool charge = 24;</code>
			 */
			public Builder clearCharge() {

				charge_ = false;
				onChanged();
				return this;
			}

			private java.lang.Object dataSource_ = "";

			/**
			 * <pre>
			 * 无人机数据来源（优云，云世纪，北斗）
			 * </pre>
			 *
			 * <code>string dataSource = 25;</code>
			 */
			public java.lang.String getDataSource() {
				java.lang.Object ref = dataSource_;
				if (!(ref instanceof java.lang.String)) {
					com.github.os72.protobuf351.ByteString bs = (com.github.os72.protobuf351.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					dataSource_ = s;
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <pre>
			 * 无人机数据来源（优云，云世纪，北斗）
			 * </pre>
			 *
			 * <code>string dataSource = 25;</code>
			 */
			public com.github.os72.protobuf351.ByteString getDataSourceBytes() {
				java.lang.Object ref = dataSource_;
				if (ref instanceof String) {
					com.github.os72.protobuf351.ByteString b = com.github.os72.protobuf351.ByteString
							.copyFromUtf8((java.lang.String) ref);
					dataSource_ = b;
					return b;
				} else {
					return (com.github.os72.protobuf351.ByteString) ref;
				}
			}

			/**
			 * <pre>
			 * 无人机数据来源（优云，云世纪，北斗）
			 * </pre>
			 *
			 * <code>string dataSource = 25;</code>
			 */
			public Builder setDataSource(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}

				dataSource_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 无人机数据来源（优云，云世纪，北斗）
			 * </pre>
			 *
			 * <code>string dataSource = 25;</code>
			 */
			public Builder clearDataSource() {

				dataSource_ = getDefaultInstance().getDataSource();
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 无人机数据来源（优云，云世纪，北斗）
			 * </pre>
			 *
			 * <code>string dataSource = 25;</code>
			 */
			public Builder setDataSourceBytes(com.github.os72.protobuf351.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				checkByteStringIsUtf8(value);

				dataSource_ = value;
				onChanged();
				return this;
			}

			private long uploadTime_;

			/**
			 * <pre>
			 * 上云时间
			 * </pre>
			 *
			 * <code>fixed64 uploadTime = 26;</code>
			 */
			public long getUploadTime() {
				return uploadTime_;
			}

			/**
			 * <pre>
			 * 上云时间
			 * </pre>
			 *
			 * <code>fixed64 uploadTime = 26;</code>
			 */
			public Builder setUploadTime(long value) {

				uploadTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 上云时间
			 * </pre>
			 *
			 * <code>fixed64 uploadTime = 26;</code>
			 */
			public Builder clearUploadTime() {

				uploadTime_ = 0L;
				onChanged();
				return this;
			}

			private double oLat_;

			/**
			 * <pre>
			 * 原始纬度
			 * </pre>
			 *
			 * <code>double oLat = 27;</code>
			 */
			public double getOLat() {
				return oLat_;
			}

			/**
			 * <pre>
			 * 原始纬度
			 * </pre>
			 *
			 * <code>double oLat = 27;</code>
			 */
			public Builder setOLat(double value) {

				oLat_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 原始纬度
			 * </pre>
			 *
			 * <code>double oLat = 27;</code>
			 */
			public Builder clearOLat() {

				oLat_ = 0D;
				onChanged();
				return this;
			}

			private double oLon_;

			/**
			 * <pre>
			 * 原始经度
			 * </pre>
			 *
			 * <code>double oLon = 28;</code>
			 */
			public double getOLon() {
				return oLon_;
			}

			/**
			 * <pre>
			 * 原始经度
			 * </pre>
			 *
			 * <code>double oLon = 28;</code>
			 */
			public Builder setOLon(double value) {

				oLon_ = value;
				onChanged();
				return this;
			}

			/**
			 * <pre>
			 * 原始经度
			 * </pre>
			 *
			 * <code>double oLon = 28;</code>
			 */
			public Builder clearOLon() {

				oLon_ = 0D;
				onChanged();
				return this;
			}

			private com.github.os72.protobuf351.MapField<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> bag_;

			private com.github.os72.protobuf351.MapField<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> internalGetBag() {
				if (bag_ == null) {
					return com.github.os72.protobuf351.MapField.emptyMapField(BagDefaultEntryHolder.defaultEntry);
				}
				return bag_;
			}

			private com.github.os72.protobuf351.MapField<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> internalGetMutableBag() {
				onChanged();
				;
				if (bag_ == null) {
					bag_ = com.github.os72.protobuf351.MapField.newMapField(BagDefaultEntryHolder.defaultEntry);
				}
				if (!bag_.isMutable()) {
					bag_ = bag_.copy();
				}
				return bag_;
			}

			public int getBagCount() {
				return internalGetBag().getMap().size();
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public boolean containsBag(int key) {

				return internalGetBag().getMap().containsKey(key);
			}

			/**
			 * Use {@link #getBagMap()} instead.
			 */
			@java.lang.Deprecated
			public java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBag() {
				return getBagMap();
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getBagMap() {
				return internalGetBag().getMap();
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrDefault(int key,
					net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag defaultValue) {

				java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> map = internalGetBag()
						.getMap();
				return map.containsKey(key) ? map.get(key) : defaultValue;
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag getBagOrThrow(int key) {

				java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> map = internalGetBag()
						.getMap();
				if (!map.containsKey(key)) {
					throw new java.lang.IllegalArgumentException();
				}
				return map.get(key);
			}

			public Builder clearBag() {
				internalGetMutableBag().getMutableMap().clear();
				return this;
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public Builder removeBag(int key) {

				internalGetMutableBag().getMutableMap().remove(key);
				return this;
			}

			/**
			 * Use alternate mutation accessors instead.
			 */
			@java.lang.Deprecated
			public java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> getMutableBag() {
				return internalGetMutableBag().getMutableMap();
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */
			public Builder putBag(int key, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag value) {

				if (value == null) {
					throw new java.lang.NullPointerException();
				}
				internalGetMutableBag().getMutableMap().put(key, value);
				return this;
			}

			/**
			 * <pre>
			 * 挂载数据，key为挂载类型，value为挂载数据
			 * </pre>
			 *
			 * <code>map&lt;int32, .net.cc.luffy.entity.proto.UavFlyDataBag&gt; bag = 29;</code>
			 */

			public Builder putAllBag(
					java.util.Map<java.lang.Integer, net.cc.luffy.entity.proto.UavFlyDataBagProto.UavFlyDataBag> values) {
				internalGetMutableBag().getMutableMap().putAll(values);
				return this;
			}

			@java.lang.Override
			public final Builder setUnknownFields(final com.github.os72.protobuf351.UnknownFieldSet unknownFields) {
				return super.setUnknownFieldsProto3(unknownFields);
			}

			@java.lang.Override
			public final Builder mergeUnknownFields(final com.github.os72.protobuf351.UnknownFieldSet unknownFields) {
				return super.mergeUnknownFields(unknownFields);
			}

			// @@protoc_insertion_point(builder_scope:net.cc.luffy.entity.proto.UavFlyData)
		}

		// @@protoc_insertion_point(class_scope:net.cc.luffy.entity.proto.UavFlyData)
		private static final net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData DEFAULT_INSTANCE;
		static {
			DEFAULT_INSTANCE = new net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData();
		}

		public static net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData getDefaultInstance() {
			return DEFAULT_INSTANCE;
		}

		private static final com.github.os72.protobuf351.Parser<UavFlyData> PARSER = new com.github.os72.protobuf351.AbstractParser<UavFlyData>() {
			@java.lang.Override
			public UavFlyData parsePartialFrom(com.github.os72.protobuf351.CodedInputStream input,
					com.github.os72.protobuf351.ExtensionRegistryLite extensionRegistry)
					throws com.github.os72.protobuf351.InvalidProtocolBufferException {
				return new UavFlyData(input, extensionRegistry);
			}
		};

		public static com.github.os72.protobuf351.Parser<UavFlyData> parser() {
			return PARSER;
		}

		@java.lang.Override
		public com.github.os72.protobuf351.Parser<UavFlyData> getParserForType() {
			return PARSER;
		}

		@java.lang.Override
		public net.cc.luffy.entity.proto.UavFlyDataProto.UavFlyData getDefaultInstanceForType() {
			return DEFAULT_INSTANCE;
		}

	}

	private static final com.github.os72.protobuf351.Descriptors.Descriptor internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor;
	private static final com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable internal_static_net_cc_luffy_entity_proto_UavFlyData_fieldAccessorTable;
	private static final com.github.os72.protobuf351.Descriptors.Descriptor internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_descriptor;
	@SuppressWarnings("unused")
	private static final com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_fieldAccessorTable;

	public static com.github.os72.protobuf351.Descriptors.FileDescriptor getDescriptor() {
		return descriptor;
	}

	private static com.github.os72.protobuf351.Descriptors.FileDescriptor descriptor;
	static {
		java.lang.String[] descriptorData = { "\n\021uav_flydata.proto\022\031net.cc.luffy.entity"
				+ ".proto\032\025uav_flydata_bag.proto\"\322\004\n\nUavFly"
				+ "Data\022\r\n\005flyId\030\001 \001(\t\022\014\n\004time\030\002 \001(\006\022\013\n\003alt"
				+ "\030\003 \001(\001\022\016\n\006height\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002\022\021\n"
				+ "\tdirection\030\006 \001(\002\022\013\n\003lat\030\007 \001(\001\022\013\n\003lon\030\010 \001"
				+ "(\001\022\014\n\004hLat\030\t \001(\001\022\014\n\004hLon\030\n \001(\001\022\013\n\003yaw\030\013 "
				+ "\001(\001\022\r\n\005pitch\030\014 \001(\001\022\014\n\004roll\030\r \001(\001\022\013\n\003mid\030"
				+ "\016 \001(\t\022\r\n\005fType\030\017 \001(\t\022\014\n\004sign\030\020 \001(\t\022\014\n\004ex"
				+ "t1\030\021 \001(\t\022\014\n\004ext2\030\022 \001(\t\022\023\n\013flyDataType\030\023 "
				+ "\001(\005\022\020\n\010isLocate\030\024 \001(\010\022\020\n\010gpsCount\030\025 \001(\005\022"
				+ "\023\n\013gsmStrength\030\026 \001(\005\022\r\n\005power\030\027 \001(\t\022\016\n\006c"
				+ "harge\030\030 \001(\010\022\022\n\ndataSource\030\031 \001(\t\022\022\n\nuploa"
				+ "dTime\030\032 \001(\006\022\014\n\004oLat\030\033 \001(\001\022\014\n\004oLon\030\034 \001(\001\022"
				+ ";\n\003bag\030\035 \003(\0132..net.cc.luffy.entity.proto"
				+ ".UavFlyData.BagEntry\032T\n\010BagEntry\022\013\n\003key\030"
				+ "\001 \001(\005\0227\n\005value\030\002 \001(\0132(.net.cc.luffy.enti"
				+ "ty.proto.UavFlyDataBag:\0028\001B\021B\017UavFlyData" + "Protob\006proto3" };
		com.github.os72.protobuf351.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new com.github.os72.protobuf351.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
			public com.github.os72.protobuf351.ExtensionRegistry assignDescriptors(
					com.github.os72.protobuf351.Descriptors.FileDescriptor root) {
				descriptor = root;
				return null;
			}
		};
		com.github.os72.protobuf351.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData,
				new com.github.os72.protobuf351.Descriptors.FileDescriptor[] {
						net.cc.luffy.entity.proto.UavFlyDataBagProto.getDescriptor(), },
				assigner);
		internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor = getDescriptor().getMessageTypes().get(0);
		internal_static_net_cc_luffy_entity_proto_UavFlyData_fieldAccessorTable = new com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable(
				internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor,
				new java.lang.String[] { "FlyId", "Time", "Alt", "Height", "Speed", "Direction", "Lat", "Lon", "HLat",
						"HLon", "Yaw", "Pitch", "Roll", "Mid", "FType", "Sign", "Ext1", "Ext2", "FlyDataType",
						"IsLocate", "GpsCount", "GsmStrength", "Power", "Charge", "DataSource", "UploadTime", "OLat",
						"OLon", "Bag", });
		internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_descriptor = internal_static_net_cc_luffy_entity_proto_UavFlyData_descriptor
				.getNestedTypes().get(0);
		internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_fieldAccessorTable = new com.github.os72.protobuf351.GeneratedMessageV3.FieldAccessorTable(
				internal_static_net_cc_luffy_entity_proto_UavFlyData_BagEntry_descriptor,
				new java.lang.String[] { "Key", "Value", });
		net.cc.luffy.entity.proto.UavFlyDataBagProto.getDescriptor();
	}

	// @@protoc_insertion_point(outer_class_scope)
}
